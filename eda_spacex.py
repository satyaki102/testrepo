# -*- coding: utf-8 -*-
"""EDA SpaceX.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fX7-ltoXWJHo9jCJifMqtJhLvQC_p_xC
"""

!pip install sqlalchemy==1.3.9

!pip install ipython-sql
!pip install ipython-sql prettytable

# Commented out IPython magic to ensure Python compatibility.
# %load_ext sql

import csv,sqlite3
import prettytable
prettytable.DEFAULT = 'DEFAULT'

con = sqlite3.connect('my_data1.db')
cur = con.cursor()

# Commented out IPython magic to ensure Python compatibility.
# %sql sqlite:///my_data1.db

import pandas as pd

df = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv')

df.to_sql('SPACEXTBL',con,if_exists = 'replace', index = False, method = 'multi')

pd.read_sql("SELECT COUNT(*) FROM SPACEXTBL", con)

df1 = pd.read_sql('SELECT * FROM SPACEXTBL', con)
print(df1)

df1 = df1.dropna(how = 'all')

df1.to_sql('SPACEXTBL',con,if_exists = 'replace', index = False, method = 'multi')

"""**Task 1**

Display the names of the unique launch sites in the space mission
"""

df1_launchsite = pd.read_sql('SELECT DISTINCT Launch_Site FROM SPACEXTBL',con)
df1_launchsite

"""Display 5 records where launch sites begin with the string 'CCA'

"""

df1_CCA = pd.read_sql("SELECT * FROM SPACEXTBL WHERE Launch_Site like 'CCA%' LIMIT 5",con)
df1_CCA

"""Display the total payload mass carried by boosters launched by NASA (CRS)Â¶"""

df1_payloadmass = pd.read_sql("SELECT SUM(PAYLOAD_MASS__KG_) FROM SPACEXTBL WHERE CUSTOMER IS 'NASA (CRS)'", con)
df1_payloadmass

"""Display average payload mass carried by booster version F9 v1.1

"""

df1_avgpayloadmass = pd.read_sql("SELECT AVG(PAYLOAD_MASS__KG_) FROM SPACEXTBL WHERE Booster_Version LIKE 'F9 v1.1%' ", con)
df1_avgpayloadmass

"""List the date when the first succesful landing outcome in ground pad was acheived."""

df1_landing = pd.read_sql("SELECT DISTINCT Landing_Outcome FROM SPACEXTBL", con)
df1_landing

"""Success (ground pad)"""

df1_firstlanding = pd.read_sql("SELECT MIN(DATE) AS FIRSTLANDINGDATE FROM SPACEXTBL WHERE Landing_Outcome IS 'Success (ground pad)' ", con)
df1_firstlanding

df1_boostersuccess = pd.read_sql("SELECT Booster_Version FROM SPACEXTBL WHERE Landing_Outcome IS 'Success (drone ship)' AND PAYLOAD_MASS__KG_> 4000 AND PAYLOAD_MASS__KG_< 6000", con)
df1_boostersuccess

df1_mission = pd.read_sql("SELECT DISTINCT Mission_Outcome FROM SPACEXTBL", con)
df1_mission

df1_successful = pd.read_sql("SELECT COUNT(*) FROM SPACEXTBL WHERE Mission_Outcome LIKE 'Success%' ", con)
df1_successful

df1_failure = pd.read_sql("SELECT COUNT(*) FROM SPACEXTBL WHERE Mission_Outcome LIKE 'Failure%' ", con)
df1_failure

df1_boostermaximumpayload = pd.read_sql("SELECT Booster_Version FROM SPACEXTBL WHERE PAYLOAD_MASS__KG_ = (SELECT MAX(PAYLOAD_MASS__KG_) FROM SPACEXTBL)", con)
df1_boostermaximumpayload

"""**Task 9**

List the records which will display the month names, failure landing_outcomes in drone ship ,booster versions, launch_site for the months in year 2015.
Note: SQLLite does not support monthnames. So you need to use substr(Date, 6,2) as month to get the months and substr(Date,0,5)='2015' for year.
"""

df1_record = pd.read_sql("SELECT substr(Date, 6,2) AS MONTH,Landing_Outcome,Booster_Version,Launch_Site FROM SPACEXTBL WHERE Landing_Outcome IS 'Failure (drone ship)' AND substr(Date,0,5) = '2015' ", con)
df1_record

df1_failuredronship = pd.read_sql("SELECT Landing_Outcome, COUNT(*) AS OUTCOME FROM SPACEXTBL WHERE Landing_Outcome = 'Failure (drone ship)' AND Date BETWEEN '2010-06-04' AND '2017-03-20' GROUP BY Landing_Outcome ORDER BY OUTCOME DESC", con)
df1_failuredronship

df1_outcome = pd.read_sql("SELECT Landing_Outcome, COUNT(*) AS OUTCOME FROM SPACEXTBL WHERE DATE BETWEEN '2010-06-04' AND '2017-03-20' GROUP BY Landing_Outcome ORDER BY OUTCOME DESC", con)
df1_outcome