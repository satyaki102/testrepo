# -*- coding: utf-8 -*-
"""Collecting the data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x1UmSMzbV_lxyR4f_wbdDr0MAWLuHOyl

**Import Libraries and Define Auxiliary Functions**

We will import the following libraries into the lab
"""

# Requests allows us to make HTTP requests which we will use to get data from an API
import requests
import pandas as pd
import numpy as np
import datetime # Datetime is a library that allows us to represent dates

# Setting this option will print all collumns of a dataframe
pd.set_option('display.max_columns', None)
# Setting this option will print all of the data in a feature
pd.set_option('display.max_colwidth', None)

"""Below we will define a series of helper functions that will help us use the API to extract information using identification numbers in the launch data.

From the rocket column we would like to learn the booster name.
"""

# Takes the dataset and uses the rocket column to call the API and append the data to the list
def getBoosterVersion(data):
  for x in data['rocket']:
    if x:
      response = requests.get("https://api.spacexdata.com/v4/rockets/"+str(x)).json()
      BoosterVersion.append(response['name'])

"""From the launchpad we would like to know the name of the launch site being used, the logitude, and the latitude."""

# Takes the dataset and uses the launchpad column to call the API and append the data to the list
def getLaunchSite(data):
  for x in data['launchpad']:
    if x:
      response = requests.get("https://api.spacexdata.com/v4/launchpads/"+str(x)).json()
      Longitude.append(response['longitude'])
      Latitude.append(response['latitude'])
      LaunchSite.append(response['name'])

"""From the payload we would like to learn the mass of the payload and the orbit that it is going to."""

# Takes the dataset and uses the payloads column to call the API and append the data to the lists
def getPayloadData(data):
  for load in data['payloads']:
    if load:
      response = requests.get("https://api.spacexdata.com/v4/payloads/"+load).json()
      PayloadMass.append(response['mass_kg'])
      Orbit.append(response['orbit'])

"""From cores we would like to learn the outcome of the landing, the type of the landing, number of flights with that core, whether gridfins were used, wheter the core is reused, wheter legs were used, the landing pad used, the block of the core which is a number used to seperate version of cores, the number of times this specific core has been reused, and the serial of the core."""

# Takes the dataset and uses the cores column to call the API and append the data to the lists
def getCoreData(data):
  for core in data['cores']:
    if core['core']!= None:
      response = requests.get("https://api.spacexdata.com/v4/cores/"+core['core']).json()
      Block.append(response['block'])
      ReusedCount.append(response['reuse_count'])
      Serial.append(response['serial'])
    else:
      Block.append(None)
      ReusedCount.append(None)
      Serial.append(None)

    Outcome.append(str(core['landing_success']) + ' ' + str(core['landing_type']))
    Flights.append(core['flight'])
    GridFins.append(core['gridfins'])
    Reused.append(core['reused'])
    Legs.append(core['legs'])
    LandingPad.append(core['landpad'])

spacex_url="https://api.spacexdata.com/v4/launches/past"

response = requests.get(spacex_url)

print(response.content)

"""**Task 1: Request and parse the SpaceX launch data using the GET request**"""

static_json_url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/API_call_spacex_api.json'

response = requests.get(static_json_url)

response.status_code

"""Now we decode the response content as a Json using .json() and turn it into a Pandas dataframe using .json_normalize()"""

data = pd.json_normalize(response.json())

data.head(5)

"""You will notice that a lot of the data are IDs. For example the rocket column has no information about the rocket just an identification number.

We will now use the API again to get information about the launches using the IDs given for each launch. Specifically we will be using columns rocket, payloads, launchpad, and cores
"""

# Lets take a subset of our dataframe keeping only the features we want and the flight number, and date_utc.
data = data[['rocket','payloads', 'launchpad', 'cores', 'flight_number', 'date_utc']]

# We will remove rows with multiple cores because those are falcon rockets with 2 extra rocket boosters and rows that have multiple payloads in a single rocket.
data = data[data['cores'].map(len)==1]
data = data[data['payloads'].map(len)==1]

# Since payloads and cores are lists of size 1 we will also extract the single value in the list and replace the feature.
data['cores'] = data['cores'].map(lambda x : x[0])
data['payloads'] = data['payloads'].map(lambda x : x[0])

# We also want to convert the date_utc to a datetime datatype and then extracting the date leaving the time
data['date'] = pd.to_datetime(data['date_utc']).dt.date

# Using the date we will restrict the dates of the launches
data = data[data['date'] <= datetime.date(2020,11,13)]

"""From the rocket we would like to learn the booster name

From the payload we would like to learn the mass of the payload and the orbit that it is going to

From the launchpad we would like to know the name of the launch site being used, the longitude, and the latitude.

From cores we would like to learn the outcome of the landing, the type of the landing, number of flights with that core, whether gridfins were used, whether the core is reused, whether legs were used, the landing pad used, the block of the core which is a number used to seperate version of cores, the number of times this specific core has been reused, and the serial of the core.

The data from these requests will be stored in lists and will be used to create a new dataframe.
"""

#Global variables
BoosterVersion = []
PayloadMass = []
Orbit = []
LaunchSite = []
Outcome = []
Flights = []
GridFins = []
Reused = []
Legs = []
LandingPad = []
Block = []
ReusedCount = []
Serial = []
Longitude = []
Latitude = []

"""These functions will apply the outputs globally to the above variables. Let's take a looks at BoosterVersion variable. Before we apply getBoosterVersion the list is empty:"""

BoosterVersion

getBoosterVersion(data)

BoosterVersion[0:5]

getLaunchSite(data)

getPayloadData(data)

getCoreData(data)

"""Finally lets construct our dataset using the data we have obtained. We we combine the columns into a dictionary."""

launch_dict = {'FlightNumber': list(data['flight_number']),
'Date': list(data['date']),
'BoosterVersion':BoosterVersion,
'PayloadMass':PayloadMass,
'Orbit':Orbit,
'LaunchSite':LaunchSite,
'Outcome':Outcome,
'Flights':Flights,
'GridFins':GridFins,
'Reused':Reused,
'Legs':Legs,
'LandingPad':LandingPad,
'Block':Block,
'ReusedCount':ReusedCount,
'Serial':Serial,
'Longitude': Longitude,
'Latitude': Latitude}

data = pd.DataFrame(launch_dict)

data.head()

"""**Task 2: Filter the dataframe to only include Falcon 9 launches**

Finally we will remove the Falcon 1 launches keeping only the Falcon 9 launches. Filter the data dataframe using the BoosterVersion column to only keep the Falcon 9 launches. Save the filtered data to a new dataframe called data_falcon9.
"""

data_falcon9 = df[df['BoosterVersion'] != 'Falcon 1']

display(data_falcon9.head())

"""Now that we have removed some values we should reset the FlgihtNumber column"""

data_falcon9.loc[:,'FlightNumber'] = list(range(1,data_falcon9.shape[0]+1))

"""data_falcon9.shape[0]

Returns the number of rows in the DataFrame (shape[0] is the row count).

range(1, data_falcon9.shape[0]+1)

Creates a sequence of integers starting from 1 up to the number of rows.

Example: if there are 100 rows, it generates range(1, 101) â†’ [1, 2, 3, ..., 100].

list(range(...))

Converts that range object into a Python list.

Assignment =

Replaces the FlightNumber column values with this new sequence.

So the column now becomes a fresh sequence 1, 2, 3, ..., n.
"""

data_falcon9

"""**Data Wrangling**

We can see below that some of the rows are missing values in our dataset.
"""

data_falcon9.isnull().sum()

"""Before we can continue we must deal with these missing values. The LandingPad column will retain None values to represent when landing pads were not used.

**Task 3: Dealing with Missing Values**
Calculate below the mean for the PayloadMass using the .mean(). Then use the mean and the .replace() function to replace np.nan values in the data with the mean you calculated.
"""

mean = data_falcon9['PayloadMass'].mean()

data_falcon9['PayloadMass'] = data_falcon9['PayloadMass'].replace(np.nan,mean)

data_falcon9.to_csv('dataset_part_1.csv', index=False)

from google.colab import files
files.download("dataset_part_1.csv")