# -*- coding: utf-8 -*-
"""Interactive Visual Analytics with Folium.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yPxN3m2X6hJKKEwpG-SazlXJjxd3H3m8

This lab contains the following tasks:

TASK 1: Mark all launch sites on a map
TASK 2: Mark the success/failed launches for each site on the map
TASK 3: Calculate the distances between a launch site to its proximities
After completed the above tasks, you should be able to find some geographical patterns about launch sites.

Let's first import required Python packages for this lab:
"""

import folium
import pandas as pd

from folium.plugins import MarkerCluster    # Import folium MarkerCluster plugin
from folium.plugins import MousePosition    # Import folium MousePosition plugin
from folium.features import DivIcon         # Import folium DivIcon plugin

URL = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv'
spacex_df = pd.read_csv(URL)

spacex_df.head()

spacex_df = spacex_df[['Launch Site', 'Lat', 'Long', 'class']]
spacex_df

launchsites_df = spacex_df.groupby(['Launch Site'],as_index = False).first()

launchsites_df = launchsites_df[['Launch Site','Lat','Long']]

launchsites_df

"""We first need to create a folium Map object, with an initial center location to be NASA Johnson Space Center at Houston, Texas."""

# Start location is NASA Johnson Space Center
nasa_coordinate = [29.559684888503615, -95.0830971930759]
site_map = folium.Map(location = nasa_coordinate, zoom_start = 10)
site_map

# Create a blue circle at NASA Johnson Space Center's coordinate with a popup label showing its name
circle = folium.Circle(nasa_coordinate,radius = 1000, color = '#d35400', fill = True).add_child(folium.Popup('NASA Johnson Space Center'))
# Create a blue circle at NASA Johnson Space Center's coordinate with a icon showing its name
marker = folium.map.Marker(nasa_coordinate, icon = DivIcon(
    icon_size = (20,20),
    icon_anchor = (0,0),
    html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'NASA JSC',
)
)
site_map.add_child(circle)
site_map.add_child(marker)

"""Now, let's add a circle for each launch site in data frame launch_sites

TODO: Create and add folium.Circle and folium.Marker for each launch site on the site map

An example of folium.Circle:

folium.Circle(coordinate, radius=1000, color='#000000', fill=True).add_child(folium.Popup(...))

An example of folium.Marker:

folium.map.Marker(coordinate, icon=DivIcon(icon_size=(20,20),icon_anchor=(0,0), html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'label', ))


"""

launchsites_df

# Initial the map
site_map = folium.Map(location=nasa_coordinate, zoom_start=5)

launchsite1_coordinate = [28.562302, -80.577356]
launchsite2_coordinate = [28.563197, -80.576820]
launchsite3_coordinate = [28.573255, -80.646895]
launchsite4_coordinate = [34.632834, -120.610745]

circle1 = folium.Circle(launchsite1_coordinate,radius = 1000, color = '#d35400', fill = True).add_child(folium.Popup('CCAFS LC-40'))
marker1 = folium.map.Marker(launchsite1_coordinate, icon = DivIcon(icon_size=(20,20),icon_anchor=(0,0), html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'CCAFS LC-40',))

circle2 = folium.Circle(launchsite2_coordinate,radius = 1000, color = '#d35400', fill = True).add_child(folium.Popup('CCAFS SLC-40'))
marker2 = folium.map.Marker(launchsite2_coordinate, icon = DivIcon(icon_size=(20,20),icon_anchor=(0,0), html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'CCAFS SLC-40',))

circle3 = folium.Circle(launchsite3_coordinate,radius = 1000, color = '#d35400', fill = True).add_child(folium.Popup('KSC LC-39A'))
marker3 = folium.map.Marker(launchsite3_coordinate, icon = DivIcon(icon_size=(20,20),icon_anchor=(0,0), html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'KSC LC-39A',))

circle4 = folium.Circle(launchsite4_coordinate,radius = 1000, color = '#d35400', fill = True).add_child(folium.Popup('VAFB SLC-4E'))
marker4 = folium.map.Marker(launchsite4_coordinate, icon = DivIcon(icon_size=(20,20),icon_anchor=(0,0), html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % 'VAFB SLC-4E',))

site_map.add_child(circle1)
site_map.add_child(marker1)
site_map.add_child(circle2)
site_map.add_child(marker2)
site_map.add_child(circle3)
site_map.add_child(marker3)
site_map.add_child(circle4)
site_map.add_child(marker4)

site_map

"""**Task 2: Mark the success/failed launches for each site on the map**"""

spacex_df.tail(10)

"""Next, let's create markers for all launch records. If a launch was successful (class=1), then we use a green marker and if a launch was failed, we use a red marker (class=0)

Note that a launch only happens in one of the four launch sites, which means many launch records will have the exact same coordinate. Marker clusters can be a good way to simplify a map containing many markers having the same coordinate.

Let's first create a MarkerCluster object
"""

marker_cluster = MarkerCluster()

"""TODO: Create a new column in spacex_df dataframe called marker_color to store the marker colors based on the class value"""

# Apply a function to check the value of `class` column
# If class=1, marker_color value will be green
# If class=0, marker_color value will be red

def class_check(class_value):
  if class_value == 1:
    return 'green'
  elif class_value == 0:
    return 'red'

spacex_df['marker_color'] = spacex_df['class'].apply(class_check)

class_check(0)

class_check(1)

spacex_df.tail(10)

"""TODO: For each launch result in spacex_df data frame, add a folium.Marker to marker_cluster"""

# Add marker_cluster to current site_map
site_map.add_child(marker_cluster)

for index, record in spacex_df.iterrows():
  marker_color = 'green' if record['class'] == 1 else 'red'
  marker = folium.Marker(
      location = [record['Lat'],record['Long']],
      popup=f"Launch Site: {record['Launch Site']}<br>Class: {record['class']}",
      icon = folium.Icon(color=marker_color, icon="rocket", prefix="fa")
  )

  marker_cluster.add_child(marker)

site_map

"""TASK 3: Calculate the distances between a launch site to its proximities
Next, we need to explore and analyze the proximities of launch sites.

Let's first add a MousePosition on the map to get coordinate for a mouse over a point on the map. As such, while you are exploring the map, you can easily find the coordinates of any points of interests (such as railway)


"""

# Add Mouse Position to get the coordinate (Lat, Long) for a mouse over on the map
formatter = "function(num){return L.Util.formatNum(num,5);}"
mouse_position = MousePosition(
    position = 'topright',
    separator = 'Long:',       #Puts " Long: " between the latitude and longitude values.
    empty_string = 'NaN',      #If the mouse is outside the map, it displays "NaN"
    lng_first = False,         #Latitude comes first, then longitude
    num_digits = 20,           #If no formatter is used, it shows up to 20 digits. (Here, the formatter overrides it.)
    prefix = 'Lat:',           #Adds "Lat:" before the latitude number
    lat_formatter = formatter,  #Apply your 5-decimal-place formatting
    lng_formatter = formatter,
)

site_map.add_child(mouse_position)
site_map

"""1.formatter = "function(num) {return L.Util.formatNum(num, 5);};"

ðŸ‘‰ Defines a JavaScript function (as a string).

num is the coordinate (latitude or longitude).

L.Util.formatNum(num, 5) rounds the number to 5 decimal places.

So if the raw latitude is 28.573255123, it will display as 28.57326.

Now zoom in to a launch site and explore its proximity to see if you can easily find any railway, highway, coastline, etc. Move your mouse to these points and mark down their coordinates (shown on the top-left) in order to the distance to the launch site.

Now zoom in to a launch site and explore its proximity to see if you can easily find any railway, highway, coastline, etc. Move your mouse to these points and mark down their coordinates (shown on the top-left) in order to the distance to the launch site.
"""

from math import sin,cos,sqrt,atan2,radians                    #radians â†’ Converts degrees (Â°) to radians, since trig functions in Python use radians.
                                                               #atan2 -> arctangent

def calculate_distance(lat1,lon1,lat2,lon2):
  R = 6373.0

  lat1 = radians(lat1)
  lon1 = radians(lon1)
  lat2 = radians(lat2)
  lon2 = radians(lon2)

  dlon = lon2 - lon1
  dlat = lat2 - lat1

  a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
  #This is the Haversine formula part. It computes a value a based on trig functions that represent the square of half the chord length between the points.
  c = 2 * atan2(sqrt(a),sqrt(1-a))
  #Converts a into the central angle (in radians) between the two points on the sphere
  distance = R * c
  return distance

"""TODO: Mark down a point on the closest coastline using MousePosition and calculate the distance between the coastline point and the launch site."""

coastline2_coordinate = [28.56331, -80.56781]

distance_coastline2 = calculate_distance(28.563197, -80.576820,28.56331, -80.56781)
print(distance_coastline2)

# Create and add a folium.Marker on your selected closest coastline point on the map
# Display the distance between coastline point and launch site using the icon property
# for example
distance_marker2 = folium.Marker(
    coastline2_coordinate,
   icon=DivIcon(
        icon_size=(20,20),
        icon_anchor=(0,0),
        html='<div style="font-size: 12; color:#d35400;"><b>%s</b></div>' % "{:10.2f} KM".format(distance_coastline2),
        )
    )

site_map.add_child(distance_marker2)

# Create a `folium.PolyLine` object using the coastline coordinates and launch site coordinate
lines=folium.PolyLine(locations=[launchsite2_coordinate, coastline2_coordinate], weight=1)

site_map.add_child(lines)