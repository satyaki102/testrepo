# -*- coding: utf-8 -*-
"""EDA SpaceX with Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EcJ60qQtruxsHKZcXt5XpbOTmeEtLK4Z
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"
df = pd.read_csv(URL)

df.head(5)

"""First, let's try to see how the FlightNumber (indicating the continuous launch attempts.) and Payload variables would affect the launch outcome.

We can plot out the FlightNumber vs. PayloadMassand overlay the outcome of the launch. We see that as the flight number increases, the first stage is more likely to land successfully. The payload mass also appears to be a factor; even with more massive payloads, the first stage often returns successfully.
"""

sns.catplot(x = 'PayloadMass', y = 'FlightNumber', hue = 'Class', data = df, aspect = 5)
plt.xlabel('Pay load Mass(kg)', fontsize = 20)
plt.ylabel('FlightNumber', fontsize = 20)
plt.show()

"""**TASK 1: Visualize the relationship between Flight Number and Launch Site**

Use the function catplot to plot FlightNumber vs LaunchSite, set the parameter x parameter to FlightNumber,set the y to Launch Site and set the parameter hue to 'class'
"""

sns.catplot(x = 'FlightNumber', y = 'LaunchSite', hue = 'Class', data = df, aspect = 1)
plt.xlabel('FlightNumber', fontsize = 20)
plt.ylabel('LaunchSite', fontsize = 20)
plt.show()

"""Looking at the graph of Flight Number versus Launch Site, colored by Class (successful landing or not):

You can see that early flights (FlightNumber close to 0) at CCAFS SLC 40 and VAFB SLC 4E generally resulted in unsuccessful landings (blue dots).
As the flight number increases, there seems to be an increase in successful landings (orange dots) at CCAFS SLC 40 and KSC LC 39A.
VAFB SLC 4E appears to have a mix of successful and unsuccessful landings across the flight numbers shown for that site, but the number of launches from this site is less frequent than the others, making it harder to draw strong conclusions from this plot alone.
Overall, the plot suggests that with increasing experience (higher flight numbers) and potentially technological improvements, the success rate of landings has improved, particularly at the CCAFS SLC 40 and KSC LC 39A launch sites.

**TASK 2: Visualize the relationship between Payload Mass and Launch Site**

We also want to observe if there is any relationship between launch sites and their payload mass.
"""

sns.scatterplot(x = 'PayloadMass', y = 'LaunchSite', data = df, hue = 'Class')
plt.xlabel('PayloadMass')
plt.ylabel('LaunchSite')
plt.tight_layout()
plt.show()

"""**TASK 3: Visualize the relationship between success rate of each orbit type**

Next, we want to visually check if there are any relationship between success rate and orbit type.

Let's create a bar chart for the sucess rate of each orbit
"""

# HINT use groupby method on Orbit column and get the mean of Class column
df_Orbit = df.groupby('Orbit')['Class'].mean()

df_Orbit.plot(kind = 'bar')
plt.title('sucess rate of each orbit')
plt.xlabel('Orbit')
plt.ylabel('Class')
plt.show()

"""**TASK 4: Visualize the relationship between FlightNumber and Orbit type**

For each orbit, we want to see if there is any relationship between FlightNumber and Orbit type.


"""

sns.scatterplot(x = 'FlightNumber', y = 'Orbit', data = df, hue = 'Class')
plt.xlabel('FlightNumber')
plt.ylabel('Orbit')
plt.tight_layout()
plt.show()

"""ASK 5: Visualize the relationship between Payload Mass and Orbit type

Similarly, we can plot the Payload Mass vs. Orbit scatter point charts to reveal the relationship between Payload Mass and Orbit type
"""

sns.scatterplot(x = 'PayloadMass', y = 'Orbit', data = df, hue = 'Class')
plt.xlabel('PayloadMass')
plt.ylabel('Orbit')
plt.tight_layout()
plt.show()

"""**TASK 6: Visualize the launch success yearly trend**

You can plot a line chart with x axis to be Year and y axis to be average success rate, to get the average launch success trend.

The function will help you get the year from the date:
"""

year = []
def Extract_year():
  for i in df['Date']:
    year.append(i.split("-")[0])
  return year

Extract_year()
df['Date'] = year
df.head()

df_year = df.groupby('Date')['Class'].mean().reset_index()

sns.lineplot(x = 'Date', y = 'Class', data = df_year)
plt.xlabel('Year')
plt.ylabel('Success Rate')
plt.title('Yearly Launch Success Trend')
plt.show()

"""**Features Engineering**

By now, you should obtain some preliminary insights about how each important variable would affect the success rate, we will select the features that will be used in success prediction in the future module.
"""

features = df[['FlightNumber', 'PayloadMass', 'Orbit', 'LaunchSite', 'Flights', 'GridFins', 'Reused', 'Legs', 'LandingPad', 'Block', 'ReusedCount', 'Serial']]
features.head()

"""**TASK 7: Create dummy variables to categorical columns**

Use the function get_dummies and features dataframe to apply OneHotEncoder to the column Orbits, LaunchSite, LandingPad, and Serial. Assign the value to the variable features_one_hot, display the results using the method head. Your result dataframe must include all features including the encoded ones.


"""

features_one_hot = pd.get_dummies(features, columns=['Orbit','LaunchSite','LandingPad','Serial'])

features_one_hot.head()

"""**TASK 8: Cast all numeric columns to float64**

Now that our features_one_hot dataframe only contains numbers, cast the entire dataframe to variable type float64
"""

features_one_hot = features_one_hot.astype('float64')

features_one_hot.head()

features_one_hot.to_csv('dataset_part_3.csv', index=False)

from google.colab import files

files.download('dataset_part_3.csv')