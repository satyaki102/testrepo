# -*- coding: utf-8 -*-
"""Interactive Dashboard with Plotly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z_-723W1Pxi6-16MHCl1vAqf5RWIP-R1
"""

!pip install packaging

!pip install pandas dash

!pip install httpx==0.20 dash plotly

import pandas as pd
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output
import plotly.express as px

df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv")
df.head(10)

df['Launch Site'].unique()

max_payload = df['Payload Mass (kg)'].max()

min_payload = df['Payload Mass (kg)'].min()

df_payload_success = df.groupby('class')['Payload Mass (kg)'].mean().reset_index()

df_payload_success

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),dcc.Dropdown(id='site-dropdown',
                options=[
                    {'label': 'All Sites', 'value': 'ALL'},
                    {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                    {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                    {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                    {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'}
                ],
                value='ALL',
                placeholder='Select a Launch Site here',
                searchable=True
                ),dcc.Graph(id='success-pie-chart'),
                                dcc.RangeSlider(id='payload-slider',
                min=0, max=10000, step=1000,
                marks={0: '0', 5000: '5000', 10000: '10000'},
                value=[min_payload, max_payload]),dcc.Graph(id = 'success-payload-scatter-chart')])
@app.callback(Output(component_id='success-pie-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'))
def get_pie_chart(entered_site):
    filtered_df = df[df['Launch Site'] == entered_site]
    if entered_site == 'ALL':
        fig = px.pie(df, values='class',
        names='Launch Site',
        title='Total Success Launches by Site')
        return fig
    else:
      count = filtered_df['class'].value_counts().reset_index()
      fig = px.pie(count,values = 'count',
                   names = 'class',
                   title = f'Total Success Launches for {entered_site}')
      return fig

@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
             [Input(component_id='site-dropdown', component_property='value'), Input(component_id="payload-slider", component_property="value")])
def get_scatter_chart(entered_site,payload_range):
    low,high = payload_range
    filtered_df = df[(df['Payload Mass (kg)'] >= low) &
                     (df['Payload Mass (kg)'] <= high)]
    if entered_site == 'ALL':
        fig1 = px.scatter(filtered_df, x = 'Payload Mass (kg)', y = 'class',
        title='Correlation between Payload and Success for all sites',
        color='Booster Version Category',
        hover_data = ['Launch Site'])
        return fig1
    else:
      site_df = filtered_df[filtered_df['Launch Site'] == entered_site]
      fig1 = px.scatter(site_df, x = 'Payload Mass (kg)', y = 'class',
        title=f'Correlation between Payload and Success for site {entered_site}',
        color='Booster Version Category',
        hover_data = ['Launch Site'])
      return fig1

if __name__ == '__main__':
    app.run()